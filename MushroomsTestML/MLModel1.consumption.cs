// This file was auto-generated by ML.NET Model Builder. 
using Microsoft.ML;
using Microsoft.ML.Data;
using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
namespace MushroomsTestML
{
    public partial class MLModel1
    {
        /// <summary>
        /// model input class for MLModel1.
        /// </summary>
        #region model input class
        public class ModelInput
        {
            [ColumnName(@"class")]
            public string Class { get; set; }

            [ColumnName(@"cap-shape")]
            public string Cap_shape { get; set; }

            [ColumnName(@"cap-surface")]
            public string Cap_surface { get; set; }

            [ColumnName(@"cap-color")]
            public string Cap_color { get; set; }

            [ColumnName(@"bruises")]
            public string Bruises { get; set; }

            [ColumnName(@"odor")]
            public string Odor { get; set; }

            [ColumnName(@"gill-attachment")]
            public string Gill_attachment { get; set; }

            [ColumnName(@"gill-spacing")]
            public string Gill_spacing { get; set; }

            [ColumnName(@"gill-size")]
            public string Gill_size { get; set; }

            [ColumnName(@"gill-color")]
            public string Gill_color { get; set; }

            [ColumnName(@"stalk-shape")]
            public string Stalk_shape { get; set; }

            [ColumnName(@"stalk-root")]
            public string Stalk_root { get; set; }

            [ColumnName(@"stalk-surface-above-ring")]
            public string Stalk_surface_above_ring { get; set; }

            [ColumnName(@"stalk-surface-below-ring")]
            public string Stalk_surface_below_ring { get; set; }

            [ColumnName(@"stalk-color-above-ring")]
            public string Stalk_color_above_ring { get; set; }

            [ColumnName(@"stalk-color-below-ring")]
            public string Stalk_color_below_ring { get; set; }

            [ColumnName(@"veil-type")]
            public string Veil_type { get; set; }

            [ColumnName(@"veil-color")]
            public string Veil_color { get; set; }

            [ColumnName(@"ring-number")]
            public string Ring_number { get; set; }

            [ColumnName(@"ring-type")]
            public string Ring_type { get; set; }

            [ColumnName(@"spore-print-color")]
            public string Spore_print_color { get; set; }

            [ColumnName(@"population")]
            public string Population { get; set; }

            [ColumnName(@"habitat")]
            public string Habitat { get; set; }

        }

        #endregion

        /// <summary>
        /// model output class for MLModel1.
        /// </summary>
        #region model output class
        public class ModelOutput
        {
            [ColumnName(@"class")]
            public uint Class { get; set; }

            [ColumnName(@"cap-shape")]
            public float[] Cap_shape { get; set; }

            [ColumnName(@"cap-surface")]
            public float[] Cap_surface { get; set; }

            [ColumnName(@"cap-color")]
            public float[] Cap_color { get; set; }

            [ColumnName(@"bruises")]
            public float[] Bruises { get; set; }

            [ColumnName(@"odor")]
            public float[] Odor { get; set; }

            [ColumnName(@"gill-attachment")]
            public float[] Gill_attachment { get; set; }

            [ColumnName(@"gill-spacing")]
            public float[] Gill_spacing { get; set; }

            [ColumnName(@"gill-size")]
            public float[] Gill_size { get; set; }

            [ColumnName(@"gill-color")]
            public float[] Gill_color { get; set; }

            [ColumnName(@"stalk-shape")]
            public float[] Stalk_shape { get; set; }

            [ColumnName(@"stalk-root")]
            public float[] Stalk_root { get; set; }

            [ColumnName(@"stalk-surface-above-ring")]
            public float[] Stalk_surface_above_ring { get; set; }

            [ColumnName(@"stalk-surface-below-ring")]
            public float[] Stalk_surface_below_ring { get; set; }

            [ColumnName(@"stalk-color-above-ring")]
            public float[] Stalk_color_above_ring { get; set; }

            [ColumnName(@"stalk-color-below-ring")]
            public float[] Stalk_color_below_ring { get; set; }

            [ColumnName(@"veil-type")]
            public float[] Veil_type { get; set; }

            [ColumnName(@"veil-color")]
            public float[] Veil_color { get; set; }

            [ColumnName(@"ring-number")]
            public float[] Ring_number { get; set; }

            [ColumnName(@"ring-type")]
            public float[] Ring_type { get; set; }

            [ColumnName(@"spore-print-color")]
            public float[] Spore_print_color { get; set; }

            [ColumnName(@"population")]
            public float[] Population { get; set; }

            [ColumnName(@"habitat")]
            public float[] Habitat { get; set; }

            [ColumnName(@"Features")]
            public float[] Features { get; set; }

            [ColumnName(@"PredictedLabel")]
            public string PredictedLabel { get; set; }

            [ColumnName(@"Score")]
            public float[] Score { get; set; }

        }

        #endregion

        private static string MLNetModelPath = Path.GetFullPath("MLModel1.zip");

        public static readonly Lazy<PredictionEngine<ModelInput, ModelOutput>> PredictEngine = new Lazy<PredictionEngine<ModelInput, ModelOutput>>(() => CreatePredictEngine(), true);

        /// <summary>
        /// Use this method to predict on <see cref="ModelInput"/>.
        /// </summary>
        /// <param name="input">model input.</param>
        /// <returns><seealso cref=" ModelOutput"/></returns>
        public static ModelOutput Predict(ModelInput input)
        {
            var predEngine = PredictEngine.Value;
            return predEngine.Predict(input);
        }

        private static PredictionEngine<ModelInput, ModelOutput> CreatePredictEngine()
        {
            var mlContext = new MLContext();
            ITransformer mlModel = mlContext.Model.Load(MLNetModelPath, out var _);
            return mlContext.Model.CreatePredictionEngine<ModelInput, ModelOutput>(mlModel);
        }
    }
}

﻿// This file was auto-generated by ML.NET Model Builder. 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.ML.Data;
using Microsoft.ML.Trainers.FastTree;
using Microsoft.ML.Trainers;
using Microsoft.ML;

namespace MushroomsTestML
{
    public partial class MLModel1
    {
        public static ITransformer RetrainPipeline(MLContext context, IDataView trainData)
        {
            var pipeline = BuildPipeline(context);
            var model = pipeline.Fit(trainData);

            return model;
        }

        /// <summary>
        /// build the pipeline that is used from model builder. Use this function to retrain model.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <returns></returns>
        public static IEstimator<ITransformer> BuildPipeline(MLContext mlContext)
        {
            // Data process configuration with pipeline data transformations
            var pipeline = mlContext.Transforms.Categorical.OneHotEncoding(new []{new InputOutputColumnPair(@"cap-shape", @"cap-shape"),new InputOutputColumnPair(@"cap-surface", @"cap-surface"),new InputOutputColumnPair(@"cap-color", @"cap-color"),new InputOutputColumnPair(@"bruises", @"bruises"),new InputOutputColumnPair(@"odor", @"odor"),new InputOutputColumnPair(@"gill-attachment", @"gill-attachment"),new InputOutputColumnPair(@"gill-spacing", @"gill-spacing"),new InputOutputColumnPair(@"gill-size", @"gill-size"),new InputOutputColumnPair(@"gill-color", @"gill-color"),new InputOutputColumnPair(@"stalk-shape", @"stalk-shape"),new InputOutputColumnPair(@"stalk-root", @"stalk-root"),new InputOutputColumnPair(@"stalk-surface-above-ring", @"stalk-surface-above-ring"),new InputOutputColumnPair(@"stalk-surface-below-ring", @"stalk-surface-below-ring"),new InputOutputColumnPair(@"stalk-color-above-ring", @"stalk-color-above-ring"),new InputOutputColumnPair(@"stalk-color-below-ring", @"stalk-color-below-ring"),new InputOutputColumnPair(@"veil-type", @"veil-type"),new InputOutputColumnPair(@"veil-color", @"veil-color"),new InputOutputColumnPair(@"ring-number", @"ring-number"),new InputOutputColumnPair(@"ring-type", @"ring-type"),new InputOutputColumnPair(@"spore-print-color", @"spore-print-color"),new InputOutputColumnPair(@"population", @"population"),new InputOutputColumnPair(@"habitat", @"habitat")})      
                                    .Append(mlContext.Transforms.Concatenate(@"Features", new []{@"cap-shape",@"cap-surface",@"cap-color",@"bruises",@"odor",@"gill-attachment",@"gill-spacing",@"gill-size",@"gill-color",@"stalk-shape",@"stalk-root",@"stalk-surface-above-ring",@"stalk-surface-below-ring",@"stalk-color-above-ring",@"stalk-color-below-ring",@"veil-type",@"veil-color",@"ring-number",@"ring-type",@"spore-print-color",@"population",@"habitat"}))      
                                    .Append(mlContext.Transforms.Conversion.MapValueToKey(outputColumnName:@"class",inputColumnName:@"class"))      
                                    .Append(mlContext.MulticlassClassification.Trainers.OneVersusAll(binaryEstimator:mlContext.BinaryClassification.Trainers.FastForest(new FastForestBinaryTrainer.Options(){NumberOfTrees=4,NumberOfLeaves=4,FeatureFraction=1F,LabelColumnName=@"class",FeatureColumnName=@"Features"}),labelColumnName:@"class"))      
                                    .Append(mlContext.Transforms.Conversion.MapKeyToValue(outputColumnName:@"PredictedLabel",inputColumnName:@"PredictedLabel"));

            return pipeline;
        }
    }
}
